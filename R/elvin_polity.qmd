```{r}
#| include: false
library(pacman)
p_load(haven,
       here,
       stargazer,
       summarytools,
       readxl,
       dplyr,
       lubridate,
       ggplot2,
       vdemdata,
       summarytools,
       devtools,
       zoo,
       tidyverse,
       fixest,
       dplyr,
       tidyr,
       modelsummary,
       tinytable,
       here,
       countrycode,
       gt)

```

```{r}
source(here("R", "Script", "01_Data_loading.R"))
source(here("R", "Script", "02_filtering.R"))
```

```{r function for regime change}



p5$isocode <- countrycode(
  sourcevar = p5$ccode,
  origin = "cown",         
  destination = "iso3c"    
)

create_country_regime_data_polity <- function(polity_data,
                                              democratization_threshold = 3,
                                              autocratization_threshold = -3,
                                              lag_years = 10,
                                              country_filter = NULL) {
  
  # Filter for specific countries if provided
  if (!is.null(country_filter)) {
    polity_data <- polity_data %>%
      filter(country %in% country_filter)
  }

  # Replace special polity2 codes (66, 77, 88) with NA
  polity_data <- polity_data %>%
    mutate(
      polity2 = ifelse(polity2 %in% c(66, 77, 88), NA, polity2)
    )
  
  # Sort and compute regime change using polity2 scores
  country_regime_changes <- polity_data %>%
    arrange(country, year) %>%
    group_by(country) %>%
    mutate(
      polity2_lag = lag(polity2, lag_years),
      polity2_diff = polity2 - polity2_lag,
      
      regime_change = case_when(
        !is.na(polity2_diff) & polity2_diff >= democratization_threshold ~ 2,
        !is.na(polity2_diff) & polity2_diff <= autocratization_threshold ~ 1,
        TRUE ~ 0
      ),
      
      treatment_factor = factor(regime_change,
                                levels = c(0, 1, 2),
                                labels = c("No change", "Autocratization", "Democratization"))
    ) %>%
    ungroup() %>%
    filter(year >= 1920) %>%
    select(country, scode, isocode,  ccode, year, polity2, polity2_lag, polity2_diff, regime_change, treatment_factor)
  
  return(country_regime_changes)
}

# Apply to your Polity5 dataset (e.g., `p5`)
regime_data <- create_country_regime_data_polity(p5)

#saving an rds for the visualization
saveRDS(regime_data, here("Output","Robustness", "polity-regime_data.rds"))
```

```{r}
#convert to isocode


merge_polity_changes_with_individuals <- function(gps_data, polity_regime_data) {
  
  # 1. Filter only regime changes (autocratization or democratization)
  regime_changes_long <- polity_regime_data %>%
    filter(regime_change != 0) %>%
    rename(regime_change_year = year)
  
  # 2. Merge by standardized 'isocode' column in both datasets
  merged_data <- gps_data %>%
    left_join(regime_changes_long,
              by = "isocode",
              relationship = "many-to-many") %>%
    mutate(
      age_at_regime_change = regime_change_year - birth_year,
      experienced_formative_change = case_when(
        is.na(regime_change_year) ~ 0,
        age_at_regime_change >= 3 & age_at_regime_change <= 18 ~ 1,
        TRUE ~ 0
      ),
      formative_autocratization = ifelse(regime_change == 1 & experienced_formative_change == 1, 1, 0),
      formative_democratization = ifelse(regime_change == 2 & experienced_formative_change == 1, 1, 0)
    )
  
  # 3. Aggregate to individual level
  individual_summary <- merged_data %>%
    group_by(id_gallup) %>%
    summarize(
      across(c(age, isocode, region, patience, risktaking, posrecip, negrecip, altruism, trust,
               subj_math_skills, gender, birth_year, year_3, year_adult), 
             first, .names = "{.col}"),
      
      formative_regime_change = if (all(is.na(experienced_formative_change))) 0 else max(experienced_formative_change, na.rm = TRUE),
      formative_autocratization = if (all(is.na(formative_autocratization))) 0 else max(formative_autocratization, na.rm = TRUE),
      formative_democratization = if (all(is.na(formative_democratization))) 0 else max(formative_democratization, na.rm = TRUE),
      
      n_formative_changes = sum(experienced_formative_change, na.rm = TRUE),
      n_formative_autocratizations = sum(formative_autocratization, na.rm = TRUE),
      n_formative_democratizations = sum(formative_democratization, na.rm = TRUE),
      
      first_formative_year = ifelse(any(experienced_formative_change == 1, na.rm = TRUE),
                                    min(regime_change_year[experienced_formative_change == 1], na.rm = TRUE),
                                    NA_real_),
      first_formative_age = ifelse(any(experienced_formative_change == 1, na.rm = TRUE),
                                   min(age_at_regime_change[experienced_formative_change == 1], na.rm = TRUE),
                                   NA_real_),
      first_formative_type = case_when(
        any(experienced_formative_change == 1, na.rm = TRUE) ~ 
          first(regime_change[experienced_formative_change == 1]),
        TRUE ~ 0
      ),
      
      all_formative_years = list(regime_change_year[experienced_formative_change == 1]),
      all_formative_ages = list(age_at_regime_change[experienced_formative_change == 1]),
      .groups = "drop"
    )
  
  # 4. Summary output
  cat("\n=== Summary Statistics ===\n")
  cat("Total individuals:", nrow(individual_summary), "\n")
  cat("Individuals with formative regime changes:", sum(individual_summary$formative_regime_change), "\n")
  cat("- Experienced autocratization:", sum(individual_summary$formative_autocratization), "\n")
  cat("- Experienced democratization:", sum(individual_summary$formative_democratization), "\n")
  cat("Average age at first formative change:", round(mean(individual_summary$first_formative_age, na.rm = TRUE), 2), "\n")
  
  cat("\nFormative regime change distribution:\n")
  print(table(individual_summary$formative_regime_change))
  
  return(individual_summary)
}



final_data_polity <- merge_polity_changes_with_individuals(gps_sub, regime_data)


```

```{r}
# 1. Identify countries that experienced any regime change in the Polity dataset
countries_with_regime_changes_polity <- regime_data %>%
  filter(regime_change != 0) %>%  # 1 = autocratization, 2 = democratization
  distinct(isocode) %>%
  pull(isocode)

# 2. Create clean treatment variable: 1 = treated, 0 = pure control, NA = contaminated control (drop later)
final_data_polity_clean <- final_data_polity %>%
  mutate(
    clean_treatment = case_when(
      formative_regime_change == 1 ~ 1,                            # Treated: regime change during formative years
      !isocode %in% countries_with_regime_changes_polity ~ 0,      # Control: countries with no regime change at all
      TRUE ~ NA_real_                                               # Contaminated control: drop
    )
  ) %>%
  filter(!is.na(clean_treatment))  # Keep only treated and clean control

# 3. Check sample sizes by treatment group
table(final_data_polity_clean$clean_treatment)

# 4. Country-level breakdown by type of first formative regime change
country_breakdown_polity <- final_data_polity_clean %>%
  group_by(first_formative_type, isocode) %>%
  summarise(n_individuals = n(), .groups = "drop") %>%
  arrange(first_formative_type, desc(n_individuals))

print("Country breakdown by treatment type (Polity):")
print(country_breakdown_polity)

# 5. Summary table: number of individuals and countries by treatment type
country_summary_polity <- final_data_polity_clean %>%
  group_by(first_formative_type) %>%
  summarise(
    n_individuals = n(),
    n_countries = n_distinct(isocode),
    countries = paste(unique(isocode), collapse = ", "),
    .groups = "drop"
  )

print("Summary by treatment type (Polity):")
print(country_summary_polity)

# 6. Summary of treated countries by type of regime change
treated_countries_polity <- final_data_polity_clean %>%
  filter(clean_treatment == 1) %>%
  group_by(isocode) %>%
  summarise(
    total_treated = n(),
    democratization = sum(formative_democratization),
    autocratization = sum(formative_autocratization),
    regime_change_type = case_when(
      democratization > 0 & autocratization == 0 ~ "Democratization only",
      autocratization > 0 & democratization == 0 ~ "Autocratization only",
      democratization > 0 & autocratization > 0 ~ "Both types",
      TRUE ~ "Neither"
    ),
    .groups = "drop"
  ) %>%
  arrange(desc(total_treated))

print("Countries with treated individuals (Polity):")
print(treated_countries_polity)

```

```{r}
calculate_avg_gdppc <- function(final_data, gdp_data) {
  # Ensure year variables are numeric
  final_data$year_3 <- as.numeric(final_data$year_3)
  final_data$year_adult <- as.numeric(final_data$year_adult)
  
  # Initialize new column
  final_data$avg_gdppc_formative <- NA_real_
  
  for (i in seq_len(nrow(final_data))) {
    iso <- final_data$isocode[i]  # Use standardized ISO code
    start_year <- final_data$year_3[i]
    end_year <- final_data$year_adult[i]
    
    # Filter GDP data for this country and formative years
    gdp_subset <- gdp_data[gdp_data$countrycode == iso &
                             gdp_data$year >= start_year &
                             gdp_data$year <= end_year, ]
    
    # Compute average GDP per capita
    final_data$avg_gdppc_formative[i] <- mean(gdp_subset$gdppc, na.rm = TRUE)
  }
  
  return(final_data)
}

# Apply to your polity-based dataset
final_data_polity_clean <- calculate_avg_gdppc(final_data_polity_clean, gdp_data)


calculate_avg_polity2 <- function(data, regime_data) {
  data$year_3 <- as.numeric(data$year_3)
  data$year_adult <- as.numeric(data$year_adult)
  data$avg_polity2_formative <- NA_real_
  
  for (i in seq_len(nrow(data))) {
    iso <- data$isocode[i]
    start_year <- data$year_3[i]
    end_year <- data$year_adult[i]
    
    polity_subset <- regime_data[regime_data$isocode == iso &
                                   regime_data$year >= start_year &
                                   regime_data$year <= end_year, ]
    
    data$avg_polity2_formative[i] <- mean(polity_subset$polity2, na.rm = TRUE)
  }
  
  return(data)
}




final_data_polity_clean_gdp <- final_data_polity_clean

# 1.remove NA
final_data_polity_clean_gdp <- final_data_polity_clean_gdp %>%
  filter(!is.na(avg_gdppc_formative))

# 2. to clean if change is not during the formative years
final_data_polity_clean_gdp$formative_regime_change[
  final_data_polity_clean_gdp$first_formative_age < 3
] <- 0

#calculating the years from regime change
final_data_polity_clean_gdp <- final_data_polity_clean_gdp %>%
  mutate(years_spend_regimes = age - first_formative_age)

# 4. chnage the region to factor
final_data_polity_clean_gdp$region <- factor(final_data_polity_clean_gdp$region)

#converting to log 
final_data_polity_clean_gdp$avg_gdppc_formative <- log(final_data_polity_clean_gdp$avg_gdppc_formative)


table(final_data_polity_clean_gdp$formative_regime_change)



```

```{r}

# Creating a recession dummy based on country-specific volatility
create_country_specific_recession <- function(gdp_data, n_sd = 1.5) {
  
  # First calculating country-specific statistics
  country_stats <- gdp_data %>%
    arrange(countrycode, year) %>%
    group_by(countrycode) %>%
    mutate(
      gdppc_growth = (gdppc - lag(gdppc)) / lag(gdppc) * 100
    ) %>%
    summarise(
      country_mean_growth = mean(gdppc_growth, na.rm = TRUE),
      country_sd_growth = sd(gdppc_growth, na.rm = TRUE),
      n_observations = sum(!is.na(gdppc_growth))
    ) %>%
    filter(n_observations >= 10)  # Require at least 10 observations for reliable stats
  
  # Now creating recession indicators
  recession_data <- gdp_data %>%
    arrange(countrycode, year) %>%
    group_by(countrycode) %>%
    mutate(
      # Calculating growth
      gdppc_growth = (gdppc - lag(gdppc)) / lag(gdppc) * 100
    ) %>%
    # Joining with country statistics
    left_join(country_stats, by = "countrycode") %>%
    mutate(
      # Calculating threshold for this country
      recession_threshold = country_mean_growth - (n_sd * country_sd_growth),
      
      # Recession if growth is below country-specific threshold
      recession = case_when(
        is.na(gdppc_growth) ~ NA_real_,
        is.na(recession_threshold) ~ NA_real_,
        gdppc_growth < recession_threshold ~ 1,
        TRUE ~ 0
      )
    ) %>%
    select(countrycode, year, recession, gdppc_growth, recession_threshold, 
           country_mean_growth, country_sd_growth) %>%
    ungroup()
  
  # Printing summary statistics
  cat("\n=== Country-Specific Recession Definition Summary ===\n")
  cat("Number of standard deviations used:", n_sd, "\n")
  cat("Countries with sufficient data:", nrow(country_stats), "\n")
  
  # Showing distribution of thresholds
  threshold_summary <- recession_data %>%
    group_by(countrycode) %>%
    summarise(
      threshold = first(recession_threshold),
      mean_growth = first(country_mean_growth),
      sd_growth = first(country_sd_growth)
    ) %>%
    filter(!is.na(threshold))
  
  cat("\nDistribution of recession thresholds:\n")
  cat("Min threshold:", round(min(threshold_summary$threshold, na.rm = TRUE), 2), "%\n")
  cat("Median threshold:", round(median(threshold_summary$threshold, na.rm = TRUE), 2), "%\n")
  cat("Max threshold:", round(max(threshold_summary$threshold, na.rm = TRUE), 2), "%\n")
  
  return(recession_data)
}

# Applying to GDP data (country level)
recession_indicators <- create_country_specific_recession(gdp_data, n_sd = 1.5)

# Connecting to GPS individual level data: Function to calculate if individual experienced recession during formative years
calculate_recession_exposure <- function(final_data, recession_indicators) {
  # Initialize new columns
  final_data$recession_formative <- 0  
  final_data$n_recession_years <- 0
  final_data$recession_intensity <- 0
  final_data$recession_threshold_avg <- NA
  
  for (i in 1:nrow(final_data)) {
    iso <- final_data$isocode[i]
    
    # Defining formative years window (ages 3-18)
    start_year <- final_data$year_3[i]      
    end_year <- final_data$year_adult[i]    
    
    # Getting recession data for formative years
    recession_subset <- recession_indicators %>%
      filter(countrycode == iso & 
               year >= start_year &    
               year <= end_year)       
    
    if (nrow(recession_subset) > 0 && any(!is.na(recession_subset$recession))) {
      # Checking if ANY recession occurred during formative years
      final_data$recession_formative[i] <- ifelse(
        any(recession_subset$recession == 1, na.rm = TRUE), 1, 0
      )
      
      # Counting how many years had recessions during ages 3-18
      final_data$n_recession_years[i] <- sum(recession_subset$recession, na.rm = TRUE)
      
      # Storing average threshold for this country (for diagnostics)
      final_data$recession_threshold_avg[i] <- mean(recession_subset$recession_threshold, na.rm = TRUE)
      
      # Average negative growth during recession years (intensity)
      recession_years <- recession_subset %>% 
        filter(recession == 1)
      
      if (nrow(recession_years) > 0) {
        final_data$recession_intensity[i] <- mean(recession_years$gdppc_growth, na.rm = TRUE)
      }
    }
  }
  
  # Printing summary statistics
  cat("\n=== Recession Exposure Summary (Country-Specific) ===\n")
  cat("Total individuals:", nrow(final_data), "\n")
  cat("Individuals with valid recession data:", sum(!is.na(final_data$recession_threshold_avg)), "\n")
  cat("Individuals with recession exposure:", sum(final_data$recession_formative), "\n")
  cat("Percentage exposed to recession:", 
      round(mean(final_data$recession_formative) * 100, 2), "%\n")
  cat("Average number of recession years (among exposed):", 
      round(mean(final_data$n_recession_years[final_data$recession_formative == 1]), 2), "\n")
  cat("Average recession intensity (among exposed):", 
      round(mean(final_data$recession_intensity[final_data$recession_formative == 1]), 2), "%\n")
  
  return(final_data)
}


final_data_polity_clean_gdp <- calculate_recession_exposure(final_data_polity_clean_gdp, recession_indicators)

```

```{r}
calculate_avg_polity2 <- function(final_data_polity_clean_gdp, p5) {
  # Ensure numeric types
  final_data_polity_clean_gdp$year_3 <- as.numeric(final_data_polity_clean_gdp$year_3)
  final_data_polity_clean_gdp$year_adult <- as.numeric(final_data_polity_clean_gdp$year_adult)
  
  # Initialize new column
  final_data_polity_clean_gdp$avg_polity2_formative <- NA
  
  # Loop over each respondent using isocode
  for (i in 1:nrow(final_data_polity_clean_gdp)) {
    iso <- final_data_polity_clean_gdp$isocode[i]
    start_year <- final_data_polity_clean_gdp$year_3[i]
    end_year <- final_data_polity_clean_gdp$year_adult[i]
    
    # Filter Polity data by ISO3 and year range
   p5_subset <- p5[p5$isocode == iso &
                    p5$year >= start_year &
                    p5$year <= end_year, ]

    
    # Compute average polity2 value (skip NAs)
    avg_polity2 <- mean(p5_subset$polity2, na.rm = TRUE)
    
    # Assign result to dataset
    final_data_polity_clean_gdp$avg_polity2_formative[i] <- avg_polity2
  }
  
  return(final_data_polity_clean_gdp)
}

# Apply the function
final_data_polity_clean_gdp <- calculate_avg_polity2(final_data_polity_clean_gdp, p5)



# Assigning observations as treated only if they were older than 2 years in year of regime change
final_data_polity_clean_gdp$formative_regime_change[final_data_polity_clean_gdp$first_formative_age < 3] <- 0
table(final_data_polity_clean_gdp$formative_regime_change)

# More preprocessing for the regressions
final_data_polity_clean_gdp <- final_data_polity_clean_gdp %>%
  mutate(
    years_spend_regimes = age - first_formative_age,
    avg_gdppc_formative = log(avg_gdppc_formative)
  )

final_data_polity_clean_gdp$region <- factor(final_data_polity_clean_gdp$region)


```




```{r}
final_data_polity_clean_gdp  <- final_data_polity_clean_gdp  %>%
  mutate(
    country = countrycode(isocode, origin = "iso3c", destination = "country.name")
  ) %>%
  relocate(country, .after = isocode)

final_data_polity_clean_gdp <- final_data_polity_clean_gdp %>%
  filter(!is.na(avg_polity2_formative))
saveRDS(final_data_polity_clean_gdp, here("Input", "clean", "final_data_polity_clean_gdp.rds" ))
```

# Fixed effects: regime_change

```{r}
#| echo: false
# Creating custom function for two-way fixed effects models
run_twfe_reg <- function(outcome_var,
                         data = final_data_polity_clean_gdp,
                         controls = c("avg_gdppc_formative", "avg_polity2_formative"),
                         treatment = "formative_regime_change",
                         fe = c("region", "birth_year"),
                         cluster_var = "country") {
  
# Constructing formula with controls
controls_formula <- paste(controls, collapse = " +")
  
# Creating the full formula with fixed effects
formula_str <- paste(
  outcome_var, "~", treatment, controls_formula, "|", 
  paste(fe, collapse = " + ")
  )
  
# Converting string to formula
formula <- as.formula(formula_str)
  
# Running the model
model <- feols(
  formula,
  data = data,
  cluster = cluster_var
  )
  
return(model)
}

preference_vars <- c("patience", "risktaking", "posrecip", "negrecip", "altruism", "trust")
model_names <- c("Patience", "Risk taking", "Positive reciprocity", "Negative reciprocity", "Altruism", "Trust")


# Applying run_twfe_reg to each preference variable and store in a list
preference_models <- list()
for (pref in preference_vars) {
  preference_models[[pref]] <- run_twfe_reg(
    outcome_var = pref,
    data = final_data_polity_clean_gdp,
    controls = NULL,
    treatment = "formative_regime_change", 
    fe = c("region", "birth_year"),
    cluster_var = "country"  # Using country as the cluster variable
  )
}

names(preference_models) <- model_names
# saving the model as a list for the report
saveRDS(preference_models, here("Output","Models", "polity results", "regime_change_models_polity.rds"))

# Creating a model summary table using msummary
msummary(
  preference_models,
  title = "Effect of Regime Change on Economic Preferences (Two-way Fixed Effects)",
  stars = TRUE,
  coef_map = c(
    "formative_regime_change" = "Regime Change experience",
    "avg_gdppc_formative" = "Average (log) GDP per Capita during formative years",
    "avg_polity2_formative" = "Average polity2 during formative years"
  ),
  notes = "Standard errors clustered at country level. Fixed effects for region and birth year included.",
  output = "gt"
)
```

# Fixed effects baseline models

## Combined: autocratization and democratization

```{r}
#| echo: false
# For heterogeneity models, we need to create democratization and autocratization 
# variables
final_data_polity_clean_gdp <- final_data_polity_clean_gdp %>%
  mutate(
    democratization = formative_democratization,
    autocratization = formative_autocratization
  )

# Creating a function for heterogeneity models
run_hetero_reg <- function(outcome_var,
                          data = final_data_polity_clean_gdp,
                          controls = c("avg_gdppc_formative",
                                       "avg_polity2_formative",
                                       "recession_formative"),
                          fe = c("region", "birth_year"),
                          cluster_var = "country") {  # CHANGED HERE
  
  # Constructing formula with controls (if any)
  controls_formula <- if (is.null(controls)) "" else paste("+", paste(controls, collapse = " + "))
  
  # Creating the full formula with fixed effects
  formula_str <- paste0(
    outcome_var, " ~ democratization + autocratization ", controls_formula, " | ",
    paste(fe, collapse = " + ")
  )
  
  # Converting string to formula
  formula <- as.formula(formula_str)
  
  # Running the model
  model <- feols(
    formula,
    data = data,
    cluster = cluster_var
  )
  
  return(model)
}

# Applying to each preference without controls
hetero_models <- lapply(preference_vars, function(pref) {
  run_hetero_reg(
    outcome_var = pref,
    data = final_data_polity_clean_gdp,
    controls = NULL  # Without controls
  )
})
names(hetero_models) <- model_names

# Saving the model as a list for the report
saveRDS(hetero_models, here("Output", "Models", "polity results", "hetero_models_polity.rds"))


# Output
msummary(
  hetero_models,
  title = "Heterogeneity by Regime Change Direction (Two-way Fixed Effects) - No Controls",
  stars = TRUE,
  coef_rename = c(
    "democratization" = "Democratization",
    "autocratization" = "Autocratization"
  ),
  notes = "Standard errors clustered at isocode (country) level. All models include region and birth year fixed effects.",
  output = "gt"
)

```

## Democratization

```{r}
# Creating a function for heterogeneity models
run_democ_reg <- function(outcome_var,
                          data = final_data_polity_clean_gdp,
                          controls = c("avg_gdppc_formative",
                                       "avg_polity2_formative",
                                       "recession_formative"),
                          fe = c("region", "birth_year"),
                          cluster_var = "country") {
  
  # Constructing formula with controls
  controls_formula <- if (is.null(controls)) "" else paste("+", paste(controls, collapse = " + "))
  
  # Creating the full formula with fixed effects
  formula_str <- paste0(
    outcome_var, " ~ democratization ", controls_formula, " | ",
    paste(fe, collapse = " + ")
  )
  
  # Converting string to formula
  formula <- as.formula(formula_str)
  
  # Running the model
  model <- feols(
    formula,
    data = data,
    cluster = cluster_var
  )
  
  return(model)
}

# Applying to each preference without controls
hetero_models_democ <- lapply(preference_vars, function(pref) {
  run_democ_reg(
    outcome_var = pref,
    data = final_data_polity_clean_gdp,
    controls = NULL  # Without controls
  )
})
names(hetero_models_democ) <- model_names

# Saving the model as a list for the report
saveRDS(hetero_models_democ, here("Output", "Models", "polity results", "hetero_models_democ_polity.rds"))


# Checking the output without controls
msummary(
  hetero_models_democ,
  title = "Heterogeneity by Democratization (Two-way Fixed Effects) - No Controls",
  stars = TRUE,
  coef_rename = c(
    "democratization" = "Democratization"
  ),
  notes = "Standard errors clustered at isocode (country) level. All models include region and birth year fixed effects.",
  output = "gt"
)



```

## Autocratization

```{r}



# Creating a function for heterogeneity models
run_autoc_reg <- function(outcome_var,
                          data = final_data_polity_clean_gdp,
                          controls = c("avg_gdppc_formative",
                                       "avg_polity2_formative",
                                       "recession_formative"),
                          fe = c("region", "birth_year"),
                          cluster_var = "country") {
  
  # Constructing formula with controls
  controls_formula <- if (is.null(controls)) "" else paste("+", paste(controls, collapse = " + "))
  
  # Creating the full formula with fixed effects
  formula_str <- paste0(
    outcome_var, " ~ autocratization ", controls_formula, " | ",
    paste(fe, collapse = " + ")
  )
  
  # Converting string to formula
  formula <- as.formula(formula_str)
  
  # Running the model
  model <- feols(
    formula,
    data = data,
    cluster = cluster_var
  )
  
  return(model)
}

# Applying to each preference without controls
hetero_models_autoc <- lapply(preference_vars, function(pref) {
  run_autoc_reg(
    outcome_var = pref,
    data = final_data_polity_clean_gdp,
    controls = NULL  # Without controls
  )
})
names(hetero_models_autoc) <- model_names

# Saving the model as a list for the report
saveRDS(hetero_models_autoc, here("Output", "Models", "polity results", "hetero_models_autoc_polity.rds"))


# Checking the output without controls
msummary(
  hetero_models_autoc,
  title = "Heterogeneity by Autocratization (Two-way Fixed Effects) - No Controls",
  stars = TRUE,
  coef_rename = c(
    "autocratization" = "Autocratization"
  ),
  notes = "Standard errors clustered at isocode (country) level. All models include region and birth year fixed effects.",
  output = "gt"
)


```

# Fixed effects: adding controls

## Combined: Autocratization + Democratization

```{r}
#| echo: false
# Creating a function for heterogeneity models
run_hetero_reg <- function(outcome_var, 
                          data = final_data_polity_clean_gdp, 
                          controls = c("avg_gdppc_formative", "avg_polity2_formative", "recession_formative"),
                          fe = c("region", "birth_year"),
                          cluster_var = "country") {
  
  # Constructing formula with controls
  controls_formula <- paste(controls, collapse = " + ")
  
  # Creating the full formula with fixed effects
  formula_str <- paste(
    outcome_var, "~ democratization + autocratization +", controls_formula, "|", 
    paste(fe, collapse = " + ")
  )
  
  # Converting string to formula
  formula <- as.formula(formula_str)
  
  # Running the model
  model <- feols(
    formula,
    data = data,
    cluster = cluster_var
  )
  
  return(model)
}

# Applying to each preference
hetero_models_controls <- lapply(preference_vars, function(pref) {
  run_hetero_reg(
    outcome_var = pref,
    data = final_data_polity_clean_gdp
  )
})
names(hetero_models_controls) <- model_names

# Saving the model as a list for the report
saveRDS(hetero_models_controls, here("Output", "Models", "polity results", "hetero_models_controls_polity.rds"))


# Checking the output
msummary(
  hetero_models_controls,
  title = "Heterogeneity by Regime Change Direction (Two-way Fixed Effects)",
  stars = TRUE,
  coef_rename = c(
    "democratization" = "Democratization",
    "autocratization" = "Autocratization",
    "avg_gdppc_formative" = "Log of Average GDP per Capita during formative years",
    "avg_polity2_formative" = "Average Polity2 Score during formative years",
    "recession_formative" = "Recession experienced during formative years"
  ),
  notes = "Standard errors clustered at isocode (country) level. All models include region and birth year fixed effects.",
  output = "gt"
)
# %>% gtsave(here("Output", "model_controls.png"))

```

## Autocratization

```{r}

# Creating a function for heterogeneity models
run_autoc_reg_controls <- function(outcome_var,
                          data = final_data_polity_clean_gdp,
                          controls = c("avg_gdppc_formative",
                                       "avg_polity2_formative",
                                       "recession_formative"),
                          fe = c("region", "birth_year"),
                          cluster_var = "country") {
  
  # Constructing formula with controls
  controls_formula <- paste(controls, collapse = " + ")
  
  # Creating the full formula with fixed effects
  formula_str <- paste(
    outcome_var, "~ autocratization +", controls_formula, "|",
    paste(fe, collapse = " + ")
  )
  
  # Converting string to formula
  formula <- as.formula(formula_str)
  
  # Running the model
  model <- feols(
    formula,
    data = data,
    cluster = cluster_var
  )
  
  return(model)
}

# Applying to each preference with controls
hetero_models_autoc_controls <- lapply(preference_vars, function(pref) {
  run_autoc_reg_controls(
    outcome_var = pref,
    data = final_data_polity_clean_gdp
  )
})
names(hetero_models_autoc_controls) <- model_names

# Saving the model as a list for the report
saveRDS(hetero_models_autoc_controls, here("Output", "Models", "polity results", "hetero_models_autoc_controls_polity.rds"))


# Checking the output
msummary(
  hetero_models_autoc_controls,
  title = "Heterogeneity by Autocratization (Two-way Fixed Effects)",
  stars = TRUE,
  coef_rename = c(
    "autocratization" = "Autocratization",
    "avg_gdppc_formative" = "Log of Average GDP per Capita during formative years",
    "avg_polity2_formative" = "Average Polity2 Score during formative years",
    "recession_formative" = "Recession experienced during formative years"
  ),
  notes = "Standard errors clustered at isocode (country) level. All models include region and birth year fixed effects.",
  output = "gt"
)


```

## Democratization

```{r}
# Creating a function for heterogeneity models
run_democ_reg_controls <- function(outcome_var,
                          data = final_data_polity_clean_gdp,
                          controls = c("avg_gdppc_formative",
                                       "avg_polity2_formative",
                                       "recession_formative"),
                          fe = c("region", "birth_year"),
                          cluster_var = "country") {
  
  # Constructing formula with controls
  controls_formula <- paste(controls, collapse = " + ")
  
  # Creating the full formula with fixed effects
  formula_str <- paste(
    outcome_var, "~ democratization +", controls_formula, "|",
    paste(fe, collapse = " + ")
  )
  
  # Converting string to formula
  formula <- as.formula(formula_str)
  
  # Running the model
  model <- feols(
    formula,
    data = data,
    cluster = cluster_var
  )
  
  return(model)
}

# Applying to each preference with controls
hetero_models_democ_controls <- lapply(preference_vars, function(pref) {
  run_democ_reg_controls(
    outcome_var = pref,
    data = final_data_polity_clean_gdp
  )
})
names(hetero_models_democ_controls) <- model_names

# Saving the model as a list for the report
saveRDS(hetero_models_democ_controls, here("Output", "Models", "polity results", "hetero_models_democ_controls_polity.rds"))


# Checking the output
msummary(
  hetero_models_democ_controls,
  title = "Heterogeneity by Democratization (Two-way Fixed Effects)",
  stars = TRUE,
  coef_rename = c(
    "democratization" = "Democratization",
    "avg_gdppc_formative" = "Log of Average GDP per Capita during formative years",
    "avg_polity2_formative" = "Average Polity2 Score during formative years",
    "recession_formative" = "Recession experienced during formative years"
  ),
  notes = "Standard errors clustered at isocode (country) level. All models include region and birth year fixed effects.",
  output = "gt"
)


```
