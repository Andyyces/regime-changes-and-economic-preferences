---
title: "Robustness_check"
format: html
---

```{r}
library(pacman)
p_load(dplyr,
       ggplot2,
       gt,
       modelsummary,
       fixest,
       broom,
       gridExtra,
       RColorBrewer,
       viridis,
       kableExtra,
       here,
       lfe,
       stargazer,
       tidyr,
       patchwork
)
```

```{r}
# Data
final_data_gdp <- readRDS(here("Input", "clean", "final_data_gdp.rds"))
final_data <- readRDS(here("Input", "clean", "final_data.rds"))
final_data_clean <- readRDS(here("Input", "clean", "final_data_clean.rds"))
country_summary <- readRDS(here("Input", "clean", "country_summary.rds"))
```

```{r}
#  Load the function from extract_codes.R
script_files <- list.files(
  path = here("R", "Script"),
  pattern = "\\.R$",
  full.names = TRUE
)

# source everything with frequency
walk(script_files, source)
```

# Clustering of standard errors

```{r}
# Function to extract results 
extract_results <- function(model, var_name) {
  coef_val <- coef(model)[var_name]
  se_val <- se(model)[var_name]
  t_stat <- coef_val / se_val
  p_value <- 2 * (1 - pnorm(abs(t_stat)))
  
  # Add significance stars
  stars <- ifelse(p_value < 0.001, "***",
                 ifelse(p_value < 0.01, "**",
                       ifelse(p_value < 0.05, "*",
                             ifelse(p_value < 0.1, "+", ""))))
  
  return(data.frame(
    coefficient = round(coef_val, 4),
    std_error = round(se_val, 4),
    t_stat = round(t_stat, 3),
    p_value = round(p_value, 4),
    significance = stars
  ))
}


# BASELINE DEMOCRATIZATION 

preferences <- c("patience", "risktaking", "posrecip", "negrecip", "altruism", "trust")

# Comparing clustering for democratization
clustering_comparison_demo <- data.frame()

for (pref in preferences) {
  formula_str <- paste(pref, "~ formative_democratization | region + birth_year")
  
  # Different clustering approaches
  mod_country <- feols(as.formula(formula_str), data = final_data_gdp, cluster = ~country)
  mod_twoway <- feols(as.formula(formula_str), data = final_data_gdp, cluster = ~country + birth_year)
  mod_region <- feols(as.formula(formula_str), data = final_data_gdp, cluster = ~region)
  mod_cohort <- feols(as.formula(formula_str), data = final_data_gdp, cluster = ~birth_year)
  
  # Extract results
  temp <- rbind(
    cbind(preference = pref, clustering = "Country", extract_results(mod_country, "formative_democratization")),
    cbind(preference = pref, clustering = "Two-way", extract_results(mod_twoway, "formative_democratization")),
    cbind(preference = pref, clustering = "Region", extract_results(mod_region, "formative_democratization")),
    cbind(preference = pref, clustering = "Birth Cohort", extract_results(mod_cohort, "formative_democratization"))
  )
  clustering_comparison_demo <- rbind(clustering_comparison_demo, temp)
}


# BASELINE AUTOCRATIZATION  

clustering_comparison_auto <- data.frame()

for (pref in preferences) {
  formula_str <- paste(pref, "~ formative_autocratization | region + birth_year")
  
  # Different clustering approaches
  mod_country <- feols(as.formula(formula_str), data = final_data_gdp, cluster = ~country)
  mod_twoway <- feols(as.formula(formula_str), data = final_data_gdp, cluster = ~country + birth_year)
  mod_region <- feols(as.formula(formula_str), data = final_data_gdp, cluster = ~region)
  mod_cohort <- feols(as.formula(formula_str), data = final_data_gdp, cluster = ~birth_year)
  
  # Extracting results
  temp <- rbind(
    cbind(preference = pref, clustering = "Country", extract_results(mod_country, "formative_autocratization")),
    cbind(preference = pref, clustering = "Two-way", extract_results(mod_twoway, "formative_autocratization")),
    cbind(preference = pref, clustering = "Region", extract_results(mod_region, "formative_autocratization")),
    cbind(preference = pref, clustering = "Birth Cohort", extract_results(mod_cohort, "formative_autocratization"))
  )
  clustering_comparison_auto <- rbind(clustering_comparison_auto, temp)
}

main_comparison <- data.frame(
  Preference = c("Trust", "Patience", "Risk Taking", "Positive Reciprocity", 
                 "Negative Reciprocity", "Altruism"),
  Demo_Country = demo_summary$Country,
  Demo_Twoway = demo_summary$`Two-way`,
  Auto_Country = auto_summary$Country,
  Auto_Twoway = auto_summary$`Two-way`
)

# Saving results in an RDS file
clustering_results <- list(
  demo_detailed = clustering_comparison_demo,
  auto_detailed = clustering_comparison_auto,
  demo_summary = demo_summary,
  auto_summary = auto_summary,
  main_comparison = main_comparison
)

saveRDS(clustering_results, here("Output", "Robustness", "clustering_results.rds"))
```

```{r}
```

```{r}
# Standard errors comparison - Democratization
plot_demo_se <- ggplot(clustering_comparison_demo, aes(x = preference, y = std_error, fill = clustering)) +
  geom_col(position = "dodge", alpha = 0.8) +
  theme_minimal() +
  labs(title = "Democratization: Standard Errors by Clustering Method",
       x = "Economic Preference", 
       y = "Standard Error",
       fill = "Clustering Method") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom") +
  scale_fill_brewer(type = "qual", palette = "Set2")



#Standard errors comparison - Autocratization  
plot_auto_se <- ggplot(clustering_comparison_auto, aes(x = preference, y = std_error, fill = clustering)) +
  geom_col(position = "dodge", alpha = 0.8) +
  theme_minimal() +
  labs(title = "Autocratization: Standard Errors by Clustering Method",
       x = "Economic Preference", 
       y = "Standard Error",
       fill = "Clustering Method") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom") +
  scale_fill_brewer(type = "qual", palette = "Set2")

plot_auto_se
plot_demo_se
```

# Balancing tests

Not possible to test: pre-treatment trends in outcomes (don't have a repeated measure of preferences), parallel trends assumption directly (panel data just on country level, not on individual level), dynamic treatment effects (single cross-section)

```{r}
create_balance_table_treated <- function(data) {
  
  # Filter to only treated individuals and create treatment indicator
  treated_data <- data %>%
    filter(clean_treatment == 1) %>%
    mutate(
      formative_regime_change = case_when(
        formative_democratization == 1 ~ 1,  # Democratization
        formative_autocratization == 1 ~ 0   # Autocratization (reference)
      )
    ) %>%
    filter(!is.na(formative_regime_change))  # Remove any ambiguous cases
  
  # Define covariates to test balance on (matching regression controls)
  balance_vars <- c("avg_gdppc_formative", "avg_libdem_formative")
  
  # Calculate differences and t-tests
  balance_results <- data.frame()
  
  for(var in balance_vars) {
    # Extract values for each group
    autocrat_vals <- treated_data %>% 
      filter(treatment_type == 0) %>% 
      pull(!!sym(var))
    
    democrat_vals <- treated_data %>% 
      filter(treatment_type == 1) %>% 
      pull(!!sym(var))
    
    # Remove NAs
    autocrat_vals <- autocrat_vals[!is.na(autocrat_vals)]
    democrat_vals <- democrat_vals[!is.na(democrat_vals)]
    
    # T-test
    if(length(autocrat_vals) > 1 & length(democrat_vals) > 1) {
      t_test <- t.test(democrat_vals, autocrat_vals)
      
      balance_results <- rbind(balance_results, data.frame(
        variable = var,
        autocrat_mean = mean(autocrat_vals),
        autocrat_sd = sd(autocrat_vals),
        autocrat_n = length(autocrat_vals),
        democrat_mean = mean(democrat_vals),
        democrat_sd = sd(democrat_vals),
        democrat_n = length(democrat_vals),
        difference = mean(democrat_vals) - mean(autocrat_vals),
        t_stat = t_test$statistic,
        p_value = t_test$p.value,
        ci_lower = t_test$conf.int[1],
        ci_upper = t_test$conf.int[2]
      ))
    }
  }
  
  return(balance_results)
}

# Generate balance table for treated groups
balance_table_treated <- create_balance_table_treated(final_data_gdp)

# Format and display
balance_table_treated %>%
  mutate(
    autocrat_mean_sd = paste0(round(autocrat_mean, 3), " (", round(autocrat_sd, 3), ")"),
    democrat_mean_sd = paste0(round(democrat_mean, 3), " (", round(democrat_sd, 3), ")"),
    difference_ci = paste0(round(difference, 3), " [", 
                          round(ci_lower, 3), ", ", round(ci_upper, 3), "]"),
    significance = case_when(
      p_value < 0.001 ~ "***",
      p_value < 0.01 ~ "**", 
      p_value < 0.05 ~ "*",
      p_value < 0.1 ~ "+",
      TRUE ~ ""
    )
  ) %>%
  select(variable, autocrat_mean_sd, democrat_mean_sd, difference_ci, 
         t_stat, p_value, significance) %>%
  gt() %>%
  tab_header(
    title = "Balancing Tests: Democratization vs Autocratization",
    subtitle = "Mean (SD) for control variables within treated sample"
  ) %>%
  cols_label(
    variable = "Variable",
    autocrat_mean_sd = "Autocratization",
    democrat_mean_sd = "Democratization", 
    difference_ci = "Difference [95% CI]",
    t_stat = "t-statistic",
    p_value = "p-value",
    significance = "Sig."
  ) %>%
  fmt_number(columns = c(t_stat, p_value), decimals = 3) %>%
  tab_footnote(
    footnote = "*** p<0.001, ** p<0.01, * p<0.05, + p<0.1"
  )

saveRDS(balance_table_treated, here("Output", "balance_table_democratization_vs_autocratization.rds"))
```

```{r}
# Test balance conditional on fixed effects - this tests your core identifying assumption
conditional_balance_test <- function(data) {
  
  cat(paste(rep("=", 60), collapse=""), "\n")
  cat("CONDITIONAL BALANCE TESTS (Most Important for TWFE)\n")
  cat(paste(rep("=", 60), collapse=""), "\n")
  cat("Testing whether treatment assignment is random conditional on region + birth year FE\n\n")
  
  # Residualize covariates with respect to fixed effects
  gdp_model <- lm(avg_gdppc_formative ~ factor(region) + factor(birth_year), data = data)
  ldi_model <- lm(avg_libdem_formative ~ factor(region) + factor(birth_year), data = data)
  
  data$gdp_residual <- residuals(gdp_model)
  data$ldi_residual <- residuals(ldi_model)
  
  # Test balance on residualized variables
  gdp_balance <- t.test(data$gdp_residual[data$clean_treatment == 1],
                       data$gdp_residual[data$clean_treatment == 0])
  
  ldi_balance <- t.test(data$ldi_residual[data$clean_treatment == 1], 
                       data$ldi_residual[data$clean_treatment == 0])
  
  # Joint F-test on residuals
  residual_data <- data %>% 
    select(clean_treatment, gdp_residual, ldi_residual) %>% 
    drop_na()
  
  joint_model <- lm(clean_treatment ~ gdp_residual + ldi_residual, data = residual_data)
  joint_f <- summary(joint_model)$fstatistic
  joint_p <- pf(joint_f[1], joint_f[2], joint_f[3], lower.tail = FALSE)
  
  # Print results
  cat("GDP per capita (conditional on FE):\n")
  cat("  t-statistic:", round(gdp_balance$statistic, 3), "\n")
  cat("  p-value:", round(gdp_balance$p.value, 4), "\n")
  cat("  Interpretation:", ifelse(gdp_balance$p.value < 0.05, 
                                  "SIGNIFICANT conditional imbalance", 
                                  "No evidence of conditional imbalance"), "\n\n")
  
  cat("Liberal Democracy Index (conditional on FE):\n")
  cat("  t-statistic:", round(ldi_balance$statistic, 3), "\n")
  cat("  p-value:", round(ldi_balance$p.value, 4), "\n")
  cat("  Interpretation:", ifelse(ldi_balance$p.value < 0.05, 
                                  "SIGNIFICANT conditional imbalance", 
                                  "No evidence of conditional imbalance"), "\n\n")
  
  cat("Joint F-test (conditional on FE):\n")
  cat("  F-statistic:", round(joint_f[1], 3), "\n")
  cat("  p-value:", round(joint_p, 4), "\n")
  cat("  Interpretation:", ifelse(joint_p < 0.05, 
                                  "REJECT null - evidence of conditional selection", 
                                  "FAIL TO REJECT null - no evidence of conditional selection"), "\n\n")
  
  # Create balance table for residuals
  balance_results_conditional <- data.frame(
    variable = c("GDP per capita (residual)", "Liberal Democracy Index (residual)"),
    control_mean = c(mean(data$gdp_residual[data$clean_treatment == 0], na.rm = TRUE),
                    mean(data$ldi_residual[data$clean_treatment == 0], na.rm = TRUE)),
    treated_mean = c(mean(data$gdp_residual[data$clean_treatment == 1], na.rm = TRUE),
                    mean(data$ldi_residual[data$clean_treatment == 1], na.rm = TRUE)),
    difference = c(gdp_balance$estimate[1] - gdp_balance$estimate[2],
                  ldi_balance$estimate[1] - ldi_balance$estimate[2]),
    t_stat = c(gdp_balance$statistic, ldi_balance$statistic),
    p_value = c(gdp_balance$p.value, ldi_balance$p.value),
    ci_lower = c(gdp_balance$conf.int[1], ldi_balance$conf.int[1]),
    ci_upper = c(gdp_balance$conf.int[2], ldi_balance$conf.int[2])
  )
  
  return(list(
    gdp_test = gdp_balance, 
    ldi_test = ldi_balance, 
    joint_f = joint_f[1], 
    joint_p = joint_p,
    balance_table = balance_results_conditional,
    data_with_residuals = data
  ))
}

# Run conditional balance tests
conditional_results <- conditional_balance_test(final_data_gdp)

# Display conditional balance table
conditional_balance_formatted <- conditional_results$balance_table %>%
  mutate(
    difference_ci = paste0(round(difference, 4), " [", 
                          round(ci_lower, 4), ", ", round(ci_upper, 4), "]"),
    significance = case_when(
      p_value < 0.001 ~ "***",
      p_value < 0.01 ~ "**", 
      p_value < 0.05 ~ "*",
      p_value < 0.1 ~ "+",
      TRUE ~ ""
    )
  ) %>%
  select(variable, control_mean, treated_mean, difference_ci, t_stat, p_value, significance)

# Save to RDS
saveRDS(conditional_balance_formatted, here("Output", "conditional_balance_table.rds"))

# Display table
conditional_balance_formatted %>%
  gt() %>%
  tab_header(
    title = "Conditional Balance Tests (Residualized Variables)",
    subtitle = "Testing balance after removing region and birth year fixed effects"
  ) %>%
  cols_label(
    variable = "Variable (Residualized)",
    control_mean = "Control Mean",
    treated_mean = "Treated Mean", 
    difference_ci = "Difference [95% CI]",
    t_stat = "t-statistic",
    p_value = "p-value",
    significance = "Sig."
  ) %>%
  fmt_number(columns = c(control_mean, treated_mean, t_stat, p_value), decimals = 4) %>%
  tab_footnote(
    footnote = "Variables residualized with respect to region and birth year fixed effects. *** p<0.001, ** p<0.01, * p<0.05, + p<0.1"
  )

```

```{r}
# Format overall balance table
balance_table_overall_formatted <- balance_table_overall %>%
  mutate(
    control_mean_sd = paste0(round(control_mean, 3), " (", round(control_sd, 3), ")"),
    treated_mean_sd = paste0(round(treated_mean, 3), " (", round(treated_sd, 3), ")"),
    difference_ci = paste0(round(difference, 3), " [", 
                          round(ci_lower, 3), ", ", round(ci_upper, 3), "]"),
    significance = case_when(
      p_value < 0.001 ~ "***",
      p_value < 0.01 ~ "**", 
      p_value < 0.05 ~ "*",
      p_value < 0.1 ~ "+",
      TRUE ~ ""
    )
  ) %>%
  select(variable, control_mean_sd, treated_mean_sd, difference_ci, t_stat, p_value, significance)
balance_table_overall_formatted
# Save to RDS
saveRDS(balance_table_overall_formatted, here("Output", "balance_table_overall.rds"))

# Analyze sample composition
sample_composition <- final_data_gdp %>%
  mutate(
    group_type = case_when(
      clean_treatment == 0 ~ "Control (No regime change)",
      democratization == 1 ~ "Democratization",
      autocratization == 1 ~ "Autocratization",
      TRUE ~ "Other"
    )
  ) %>%
  filter(group_type != "Other") %>%
  count(group_type) %>%
  mutate(
    proportion = n / sum(n),
    percentage = round(proportion * 100, 1)
  )

# Save sample composition to RDS
saveRDS(sample_composition, here("Output", "sample_composition.rds"))

sample_composition %>%
  gt() %>%
  tab_header(
    title = "Sample Composition by Treatment Type"
  ) %>%
  cols_label(
    group_type = "Group",
    n = "N",
    proportion = "Proportion",
    percentage = "Percentage"
  ) %>%
  fmt_number(columns = proportion, decimals = 3) %>%
  fmt_number(columns = percentage, decimals = 1)
```

## F-test for joint significance

Can all of our variables together predict who gets treated?

```{r}

joint_balance_test_treated <- function(data) {
  
  # Filter to treated individuals only
  treated_data <- data %>%
    filter(clean_treatment == 1) %>%
    mutate(
      treatment_type = case_when(
        democratization == 1 ~ 1,  # Democratization
        autocratization == 1 ~ 0   # Autocratization
      )
    ) %>%
    filter(!is.na(treatment_type)) %>%
    select(treatment_type, avg_gdppc_formative, avg_libdem_formative) %>%
    drop_na()
  
  # Run regression of democratization on covariates
  balance_reg <- lm(treatment_type ~ avg_gdppc_formative + avg_libdem_formative, 
                    data = treated_data)
  
  # F-test for joint significance
  f_test <- summary(balance_reg)$fstatistic
  p_val <- pf(f_test[1], f_test[2], f_test[3], lower.tail = FALSE)
  
  cat("Joint F-test for Balance (Democratization vs Autocratization):\n")
  cat("F-statistic:", round(f_test[1], 3), "\n")
  cat("p-value:", round(p_val, 4), "\n")
  cat("Interpretation:", ifelse(p_val < 0.05, 
                                "REJECT null - groups appear unbalanced", 
                                "FAIL TO REJECT null - groups appear balanced"), "\n\n")
  
  return(list(f_stat = f_test[1], p_value = p_val, model = balance_reg))
}

joint_test_treated <- joint_balance_test_treated(final_data_gdp)
```

```{r}
create_balance_table_overall <- function(data) {
  
  balance_vars <- c("avg_gdppc_formative", "avg_libdem_formative")
  balance_results <- data.frame()
  
  for(var in balance_vars) {
    # Extract values for each group
    control_vals <- data %>% 
      filter(clean_treatment == 0) %>% 
      pull(!!sym(var))
    
    treated_vals <- data %>% 
      filter(clean_treatment == 1) %>% 
      pull(!!sym(var))
    
    # Remove NAs
    control_vals <- control_vals[!is.na(control_vals)]
    treated_vals <- treated_vals[!is.na(treated_vals)]
    
    # T-test
    if(length(control_vals) > 1 & length(treated_vals) > 1) {
      t_test <- t.test(treated_vals, control_vals)
      
      balance_results <- rbind(balance_results, data.frame(
        variable = var,
        control_mean = mean(control_vals),
        control_sd = sd(control_vals),
        control_n = length(control_vals),
        treated_mean = mean(treated_vals),
        treated_sd = sd(treated_vals),
        treated_n = length(treated_vals),
        difference = mean(treated_vals) - mean(control_vals),
        t_stat = t_test$statistic,
        p_value = t_test$p.value,
        ci_lower = t_test$conf.int[1],
        ci_upper = t_test$conf.int[2]
      ))
    }
  }
  
  return(balance_results)
}

balance_table_overall <- create_balance_table_overall(final_data_gdp)

# Joint F-test for overall balance
joint_balance_test_overall <- function(data) {
  
  test_data <- data %>%
    select(clean_treatment, avg_gdppc_formative, avg_libdem_formative) %>%
    drop_na()
  
  balance_reg <- lm(clean_treatment ~ avg_gdppc_formative + avg_libdem_formative, 
                    data = test_data)
  
  f_test <- summary(balance_reg)$fstatistic
  p_val <- pf(f_test[1], f_test[2], f_test[3], lower.tail = FALSE)
  
  cat("Joint F-test for Overall Balance (Any Treatment vs Control):\n")
  cat("F-statistic:", round(f_test[1], 3), "\n")
  cat("p-value:", round(p_val, 4), "\n")
  cat("Note: Large F-statistic expected - regime change countries differ from stable countries\n\n")
  
  return(list(f_stat = f_test[1], p_value = p_val, model = balance_reg))
}

joint_test_overall <- joint_balance_test_overall(final_data_gdp)
```

## 
