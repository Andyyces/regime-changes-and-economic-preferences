---
title: "Robustness_check"
format: html
---

```{r}
library(pacman)
p_load(dplyr,
       ggplot2,
       gt,
       modelsummary,
       fixest,
       broom,
       gridExtra,
       RColorBrewer,
       viridis,
       kableExtra
)
```

# Balancing tests

Not possible to test: pre-treatment trends in outcomes (don't have a repeated measure of preferences), parallel trends assumption directly (panel data just on country level, not on individual level), dynamic treatment effects (single cross-section)

```{r}
create_balance_table_treated <- function(data) {
  
  # Filter to only treated individuals and create treatment indicator
  treated_data <- data %>%
    filter(clean_treatment == 1) %>%
    mutate(
      treatment_type = case_when(
        democratization == 1 ~ 1,  # Democratization
        autocratization == 1 ~ 0   # Autocratization (reference)
      )
    ) %>%
    filter(!is.na(treatment_type))  # Remove any ambiguous cases
  
  # Define covariates to test balance on (matching regression controls)
  balance_vars <- c("avg_gdppc_formative", "avg_libdem_formative")
  
  # Calculate differences and t-tests
  balance_results <- data.frame()
  
  for(var in balance_vars) {
    # Extract values for each group
    autocrat_vals <- treated_data %>% 
      filter(treatment_type == 0) %>% 
      pull(!!sym(var))
    
    democrat_vals <- treated_data %>% 
      filter(treatment_type == 1) %>% 
      pull(!!sym(var))
    
    # Remove NAs
    autocrat_vals <- autocrat_vals[!is.na(autocrat_vals)]
    democrat_vals <- democrat_vals[!is.na(democrat_vals)]
    
    # T-test
    if(length(autocrat_vals) > 1 & length(democrat_vals) > 1) {
      t_test <- t.test(democrat_vals, autocrat_vals)
      
      balance_results <- rbind(balance_results, data.frame(
        variable = var,
        autocrat_mean = mean(autocrat_vals),
        autocrat_sd = sd(autocrat_vals),
        autocrat_n = length(autocrat_vals),
        democrat_mean = mean(democrat_vals),
        democrat_sd = sd(democrat_vals),
        democrat_n = length(democrat_vals),
        difference = mean(democrat_vals) - mean(autocrat_vals),
        t_stat = t_test$statistic,
        p_value = t_test$p.value,
        ci_lower = t_test$conf.int[1],
        ci_upper = t_test$conf.int[2]
      ))
    }
  }
  
  return(balance_results)
}

# Generate balance table for treated groups
balance_table_treated <- create_balance_table_treated(final_data_gdp)

# Format and display
balance_table_treated %>%
  mutate(
    autocrat_mean_sd = paste0(round(autocrat_mean, 3), " (", round(autocrat_sd, 3), ")"),
    democrat_mean_sd = paste0(round(democrat_mean, 3), " (", round(democrat_sd, 3), ")"),
    difference_ci = paste0(round(difference, 3), " [", 
                          round(ci_lower, 3), ", ", round(ci_upper, 3), "]"),
    significance = case_when(
      p_value < 0.001 ~ "***",
      p_value < 0.01 ~ "**", 
      p_value < 0.05 ~ "*",
      p_value < 0.1 ~ "+",
      TRUE ~ ""
    )
  ) %>%
  select(variable, autocrat_mean_sd, democrat_mean_sd, difference_ci, 
         t_stat, p_value, significance) %>%
  gt() %>%
  tab_header(
    title = "Balancing Tests: Democratization vs Autocratization",
    subtitle = "Mean (SD) for control variables within treated sample"
  ) %>%
  cols_label(
    variable = "Variable",
    autocrat_mean_sd = "Autocratization",
    democrat_mean_sd = "Democratization", 
    difference_ci = "Difference [95% CI]",
    t_stat = "t-statistic",
    p_value = "p-value",
    significance = "Sig."
  ) %>%
  fmt_number(columns = c(t_stat, p_value), decimals = 3) %>%
  tab_footnote(
    footnote = "*** p<0.001, ** p<0.01, * p<0.05, + p<0.1"
  )

saveRDS(balance_table_treated, here("Output", "balance_table_democratization_vs_autocratization.rds"))
```

```{r}
# Test balance conditional on fixed effects - this tests your core identifying assumption
conditional_balance_test <- function(data) {
  
  cat(paste(rep("=", 60), collapse=""), "\n")
  cat("CONDITIONAL BALANCE TESTS (Most Important for TWFE)\n")
  cat(paste(rep("=", 60), collapse=""), "\n")
  cat("Testing whether treatment assignment is random conditional on region + birth year FE\n\n")
  
  # Residualize covariates with respect to fixed effects
  gdp_model <- lm(avg_gdppc_formative ~ factor(region) + factor(birth_year), data = data)
  ldi_model <- lm(avg_libdem_formative ~ factor(region) + factor(birth_year), data = data)
  
  data$gdp_residual <- residuals(gdp_model)
  data$ldi_residual <- residuals(ldi_model)
  
  # Test balance on residualized variables
  gdp_balance <- t.test(data$gdp_residual[data$clean_treatment == 1],
                       data$gdp_residual[data$clean_treatment == 0])
  
  ldi_balance <- t.test(data$ldi_residual[data$clean_treatment == 1], 
                       data$ldi_residual[data$clean_treatment == 0])
  
  # Joint F-test on residuals
  residual_data <- data %>% 
    select(clean_treatment, gdp_residual, ldi_residual) %>% 
    drop_na()
  
  joint_model <- lm(clean_treatment ~ gdp_residual + ldi_residual, data = residual_data)
  joint_f <- summary(joint_model)$fstatistic
  joint_p <- pf(joint_f[1], joint_f[2], joint_f[3], lower.tail = FALSE)
  
  # Print results
  cat("GDP per capita (conditional on FE):\n")
  cat("  t-statistic:", round(gdp_balance$statistic, 3), "\n")
  cat("  p-value:", round(gdp_balance$p.value, 4), "\n")
  cat("  Interpretation:", ifelse(gdp_balance$p.value < 0.05, 
                                  "SIGNIFICANT conditional imbalance", 
                                  "No evidence of conditional imbalance"), "\n\n")
  
  cat("Liberal Democracy Index (conditional on FE):\n")
  cat("  t-statistic:", round(ldi_balance$statistic, 3), "\n")
  cat("  p-value:", round(ldi_balance$p.value, 4), "\n")
  cat("  Interpretation:", ifelse(ldi_balance$p.value < 0.05, 
                                  "SIGNIFICANT conditional imbalance", 
                                  "No evidence of conditional imbalance"), "\n\n")
  
  cat("Joint F-test (conditional on FE):\n")
  cat("  F-statistic:", round(joint_f[1], 3), "\n")
  cat("  p-value:", round(joint_p, 4), "\n")
  cat("  Interpretation:", ifelse(joint_p < 0.05, 
                                  "REJECT null - evidence of conditional selection", 
                                  "FAIL TO REJECT null - no evidence of conditional selection"), "\n\n")
  
  # Create balance table for residuals
  balance_results_conditional <- data.frame(
    variable = c("GDP per capita (residual)", "Liberal Democracy Index (residual)"),
    control_mean = c(mean(data$gdp_residual[data$clean_treatment == 0], na.rm = TRUE),
                    mean(data$ldi_residual[data$clean_treatment == 0], na.rm = TRUE)),
    treated_mean = c(mean(data$gdp_residual[data$clean_treatment == 1], na.rm = TRUE),
                    mean(data$ldi_residual[data$clean_treatment == 1], na.rm = TRUE)),
    difference = c(gdp_balance$estimate[1] - gdp_balance$estimate[2],
                  ldi_balance$estimate[1] - ldi_balance$estimate[2]),
    t_stat = c(gdp_balance$statistic, ldi_balance$statistic),
    p_value = c(gdp_balance$p.value, ldi_balance$p.value),
    ci_lower = c(gdp_balance$conf.int[1], ldi_balance$conf.int[1]),
    ci_upper = c(gdp_balance$conf.int[2], ldi_balance$conf.int[2])
  )
  
  return(list(
    gdp_test = gdp_balance, 
    ldi_test = ldi_balance, 
    joint_f = joint_f[1], 
    joint_p = joint_p,
    balance_table = balance_results_conditional,
    data_with_residuals = data
  ))
}

# Run conditional balance tests
conditional_results <- conditional_balance_test(final_data_gdp)

# Display conditional balance table
conditional_balance_formatted <- conditional_results$balance_table %>%
  mutate(
    difference_ci = paste0(round(difference, 4), " [", 
                          round(ci_lower, 4), ", ", round(ci_upper, 4), "]"),
    significance = case_when(
      p_value < 0.001 ~ "***",
      p_value < 0.01 ~ "**", 
      p_value < 0.05 ~ "*",
      p_value < 0.1 ~ "+",
      TRUE ~ ""
    )
  ) %>%
  select(variable, control_mean, treated_mean, difference_ci, t_stat, p_value, significance)

# Save to RDS
saveRDS(conditional_balance_formatted, here("Output", "conditional_balance_table.rds"))

# Display table
conditional_balance_formatted %>%
  gt() %>%
  tab_header(
    title = "Conditional Balance Tests (Residualized Variables)",
    subtitle = "Testing balance after removing region and birth year fixed effects"
  ) %>%
  cols_label(
    variable = "Variable (Residualized)",
    control_mean = "Control Mean",
    treated_mean = "Treated Mean", 
    difference_ci = "Difference [95% CI]",
    t_stat = "t-statistic",
    p_value = "p-value",
    significance = "Sig."
  ) %>%
  fmt_number(columns = c(control_mean, treated_mean, t_stat, p_value), decimals = 4) %>%
  tab_footnote(
    footnote = "Variables residualized with respect to region and birth year fixed effects. *** p<0.001, ** p<0.01, * p<0.05, + p<0.1"
  )

```

```{r}
# Format overall balance table
balance_table_overall_formatted <- balance_table_overall %>%
  mutate(
    control_mean_sd = paste0(round(control_mean, 3), " (", round(control_sd, 3), ")"),
    treated_mean_sd = paste0(round(treated_mean, 3), " (", round(treated_sd, 3), ")"),
    difference_ci = paste0(round(difference, 3), " [", 
                          round(ci_lower, 3), ", ", round(ci_upper, 3), "]"),
    significance = case_when(
      p_value < 0.001 ~ "***",
      p_value < 0.01 ~ "**", 
      p_value < 0.05 ~ "*",
      p_value < 0.1 ~ "+",
      TRUE ~ ""
    )
  ) %>%
  select(variable, control_mean_sd, treated_mean_sd, difference_ci, t_stat, p_value, significance)
balance_table_overall_formatted
# Save to RDS
saveRDS(balance_table_overall_formatted, here("Output", "balance_table_overall.rds"))

# Analyze sample composition
sample_composition <- final_data_gdp %>%
  mutate(
    group_type = case_when(
      clean_treatment == 0 ~ "Control (No regime change)",
      democratization == 1 ~ "Democratization",
      autocratization == 1 ~ "Autocratization",
      TRUE ~ "Other"
    )
  ) %>%
  filter(group_type != "Other") %>%
  count(group_type) %>%
  mutate(
    proportion = n / sum(n),
    percentage = round(proportion * 100, 1)
  )

# Save sample composition to RDS
saveRDS(sample_composition, here("Output", "sample_composition.rds"))

sample_composition %>%
  gt() %>%
  tab_header(
    title = "Sample Composition by Treatment Type"
  ) %>%
  cols_label(
    group_type = "Group",
    n = "N",
    proportion = "Proportion",
    percentage = "Percentage"
  ) %>%
  fmt_number(columns = proportion, decimals = 3) %>%
  fmt_number(columns = percentage, decimals = 1)
```

## F-test for joint significance

Can all of our variables together predict who gets treated?

```{r}

joint_balance_test_treated <- function(data) {
  
  # Filter to treated individuals only
  treated_data <- data %>%
    filter(clean_treatment == 1) %>%
    mutate(
      treatment_type = case_when(
        democratization == 1 ~ 1,  # Democratization
        autocratization == 1 ~ 0   # Autocratization
      )
    ) %>%
    filter(!is.na(treatment_type)) %>%
    select(treatment_type, avg_gdppc_formative, avg_libdem_formative) %>%
    drop_na()
  
  # Run regression of democratization on covariates
  balance_reg <- lm(treatment_type ~ avg_gdppc_formative + avg_libdem_formative, 
                    data = treated_data)
  
  # F-test for joint significance
  f_test <- summary(balance_reg)$fstatistic
  p_val <- pf(f_test[1], f_test[2], f_test[3], lower.tail = FALSE)
  
  cat("Joint F-test for Balance (Democratization vs Autocratization):\n")
  cat("F-statistic:", round(f_test[1], 3), "\n")
  cat("p-value:", round(p_val, 4), "\n")
  cat("Interpretation:", ifelse(p_val < 0.05, 
                                "REJECT null - groups appear unbalanced", 
                                "FAIL TO REJECT null - groups appear balanced"), "\n\n")
  
  return(list(f_stat = f_test[1], p_value = p_val, model = balance_reg))
}

joint_test_treated <- joint_balance_test_treated(final_data_gdp)
```

```{r}
create_balance_table_overall <- function(data) {
  
  balance_vars <- c("avg_gdppc_formative", "avg_libdem_formative")
  balance_results <- data.frame()
  
  for(var in balance_vars) {
    # Extract values for each group
    control_vals <- data %>% 
      filter(clean_treatment == 0) %>% 
      pull(!!sym(var))
    
    treated_vals <- data %>% 
      filter(clean_treatment == 1) %>% 
      pull(!!sym(var))
    
    # Remove NAs
    control_vals <- control_vals[!is.na(control_vals)]
    treated_vals <- treated_vals[!is.na(treated_vals)]
    
    # T-test
    if(length(control_vals) > 1 & length(treated_vals) > 1) {
      t_test <- t.test(treated_vals, control_vals)
      
      balance_results <- rbind(balance_results, data.frame(
        variable = var,
        control_mean = mean(control_vals),
        control_sd = sd(control_vals),
        control_n = length(control_vals),
        treated_mean = mean(treated_vals),
        treated_sd = sd(treated_vals),
        treated_n = length(treated_vals),
        difference = mean(treated_vals) - mean(control_vals),
        t_stat = t_test$statistic,
        p_value = t_test$p.value,
        ci_lower = t_test$conf.int[1],
        ci_upper = t_test$conf.int[2]
      ))
    }
  }
  
  return(balance_results)
}

balance_table_overall <- create_balance_table_overall(final_data_gdp)

# Joint F-test for overall balance
joint_balance_test_overall <- function(data) {
  
  test_data <- data %>%
    select(clean_treatment, avg_gdppc_formative, avg_libdem_formative) %>%
    drop_na()
  
  balance_reg <- lm(clean_treatment ~ avg_gdppc_formative + avg_libdem_formative, 
                    data = test_data)
  
  f_test <- summary(balance_reg)$fstatistic
  p_val <- pf(f_test[1], f_test[2], f_test[3], lower.tail = FALSE)
  
  cat("Joint F-test for Overall Balance (Any Treatment vs Control):\n")
  cat("F-statistic:", round(f_test[1], 3), "\n")
  cat("p-value:", round(p_val, 4), "\n")
  cat("Note: Large F-statistic expected - regime change countries differ from stable countries\n\n")
  
  return(list(f_stat = f_test[1], p_value = p_val, model = balance_reg))
}

joint_test_overall <- joint_balance_test_overall(final_data_gdp)
```

# Recession dummy

## Calculation

```{r}
# Create recession dummy with stricter threshold
create_recession_data <- function(gdp_data, recession_threshold = -2) {
  recession_data <- gdp_data %>%
    arrange(countrycode, year) %>%
    group_by(countrycode) %>%
    mutate(
      # Calculate year-over-year GDP per capita growth
      gdppc_growth = (gdppc - lag(gdppc)) / lag(gdppc) * 100,
      
      # Define recession as growth below threshold (default -2%)
      recession = ifelse(gdppc_growth < recession_threshold, 1, 0)
    ) %>%
    select(countrycode, year, recession, gdppc_growth) %>%
    ungroup()
  
  return(recession_data)
}

# Apply to your GDP data with -2% threshold
recession_indicators <- create_recession_data(gdp_data, recession_threshold = -2)
```

```{r}
# Function to calculate if individual experienced recession during formative years
calculate_recession_exposure <- function(final_data, recession_indicators) {
  # Initialize new columns
  final_data$recession_formative <- 0  # Default to 0 (no recession)
  final_data$n_recession_years <- 0
  final_data$recession_intensity <- 0
  
  for (i in 1:nrow(final_data)) {
    iso <- final_data$isocode[i]
    
    # Define formative years window (ages 3-18)
    start_year <- final_data$year_3[i]      # Year when individual turned 3
    end_year <- final_data$year_adult[i]    # Year when individual turned 18
    
    # Get ONLY recessions that occurred during ages 3-18
    recession_subset <- recession_indicators %>%
      filter(countrycode == iso & 
             year >= start_year &    # Must be after age 3
             year <= end_year)       # Must be before age 18
    
    if (nrow(recession_subset) > 0) {
      # Check if ANY recession occurred during formative years
      final_data$recession_formative[i] <- ifelse(
        any(recession_subset$recession == 1, na.rm = TRUE), 1, 0
      )
      
      # Count how many years had recessions during ages 3-18
      final_data$n_recession_years[i] <- sum(recession_subset$recession, na.rm = TRUE)
      
      # Average negative growth during recession years (intensity)
      recession_years <- recession_subset %>% 
        filter(recession == 1)
      
      if (nrow(recession_years) > 0) {
        final_data$recession_intensity[i] <- mean(recession_years$gdppc_growth, na.rm = TRUE)
      }
    }
  }
  
  # Print summary statistics
  cat("\n=== Recession Exposure Summary (Threshold: -2%) ===\n")
  cat("Total individuals:", nrow(final_data), "\n")
  cat("Individuals with recession exposure:", sum(final_data$recession_formative), "\n")
  cat("Percentage exposed to recession:", 
      round(mean(final_data$recession_formative) * 100, 2), "%\n")
  cat("Average number of recession years (among exposed):", 
      round(mean(final_data$n_recession_years[final_data$recession_formative == 1]), 2), "\n")
  cat("Average recession intensity (among exposed):", 
      round(mean(final_data$recession_intensity[final_data$recession_formative == 1]), 2), "%\n")
  
  return(final_data)
}

# Apply to your data
final_data_gdp <- calculate_recession_exposure(final_data_gdp, recession_indicators)
```

## Adding to regression models

Diagnostic tests

## Country-specific approach

```{r}
# Create recession based on country-specific volatility
create_country_specific_recession <- function(gdp_data, n_sd = 1.5) {
  
  # First calculate country-specific statistics
  country_stats <- gdp_data %>%
    arrange(countrycode, year) %>%
    group_by(countrycode) %>%
    mutate(
      gdppc_growth = (gdppc - lag(gdppc)) / lag(gdppc) * 100
    ) %>%
    summarise(
      country_mean_growth = mean(gdppc_growth, na.rm = TRUE),
      country_sd_growth = sd(gdppc_growth, na.rm = TRUE),
      n_observations = sum(!is.na(gdppc_growth))
    ) %>%
    filter(n_observations >= 10)  # Require at least 10 observations for reliable stats
  
  # Now create recession indicators
  recession_data <- gdp_data %>%
    arrange(countrycode, year) %>%
    group_by(countrycode) %>%
    mutate(
      # Calculate growth
      gdppc_growth = (gdppc - lag(gdppc)) / lag(gdppc) * 100
    ) %>%
    # Join with country statistics
    left_join(country_stats, by = "countrycode") %>%
    mutate(
      # Calculate threshold for this country
      recession_threshold = country_mean_growth - (n_sd * country_sd_growth),
      
      # Recession if growth is below country-specific threshold
      recession = case_when(
        is.na(gdppc_growth) ~ NA_real_,
        is.na(recession_threshold) ~ NA_real_,
        gdppc_growth < recession_threshold ~ 1,
        TRUE ~ 0
      )
    ) %>%
    select(countrycode, year, recession, gdppc_growth, recession_threshold, 
           country_mean_growth, country_sd_growth) %>%
    ungroup()
  
  # Print summary statistics
  cat("\n=== Country-Specific Recession Definition Summary ===\n")
  cat("Number of standard deviations used:", n_sd, "\n")
  cat("Countries with sufficient data:", nrow(country_stats), "\n")
  
  # Show distribution of thresholds
  threshold_summary <- recession_data %>%
    group_by(countrycode) %>%
    summarise(
      threshold = first(recession_threshold),
      mean_growth = first(country_mean_growth),
      sd_growth = first(country_sd_growth)
    ) %>%
    filter(!is.na(threshold))
  
  cat("\nDistribution of recession thresholds:\n")
  cat("Min threshold:", round(min(threshold_summary$threshold, na.rm = TRUE), 2), "%\n")
  cat("Median threshold:", round(median(threshold_summary$threshold, na.rm = TRUE), 2), "%\n")
  cat("Max threshold:", round(max(threshold_summary$threshold, na.rm = TRUE), 2), "%\n")
  
  return(recession_data)
}

# Apply to your GDP data
recession_indicators <- create_country_specific_recession(gdp_data, n_sd = 1.5)
```

```{r}
# Function to calculate if individual experienced recession during formative years
calculate_recession_exposure <- function(final_data, recession_indicators) {
  # Initialize new columns
  final_data$recession_formative <- 0  
  final_data$n_recession_years <- 0
  final_data$recession_intensity <- 0
  final_data$recession_threshold_avg <- NA
  
  for (i in 1:nrow(final_data)) {
    iso <- final_data$isocode[i]
    
    # Define formative years window (ages 3-18)
    start_year <- final_data$year_3[i]      
    end_year <- final_data$year_adult[i]    
    
    # Get recession data for formative years
    recession_subset <- recession_indicators %>%
      filter(countrycode == iso & 
             year >= start_year &    
             year <= end_year)       
    
    if (nrow(recession_subset) > 0 && any(!is.na(recession_subset$recession))) {
      # Check if ANY recession occurred during formative years
      final_data$recession_formative[i] <- ifelse(
        any(recession_subset$recession == 1, na.rm = TRUE), 1, 0
      )
      
      # Count how many years had recessions during ages 3-18
      final_data$n_recession_years[i] <- sum(recession_subset$recession, na.rm = TRUE)
      
      # Store average threshold for this country (for diagnostics)
      final_data$recession_threshold_avg[i] <- mean(recession_subset$recession_threshold, na.rm = TRUE)
      
      # Average negative growth during recession years (intensity)
      recession_years <- recession_subset %>% 
        filter(recession == 1)
      
      if (nrow(recession_years) > 0) {
        final_data$recession_intensity[i] <- mean(recession_years$gdppc_growth, na.rm = TRUE)
      }
    }
  }
  
  # Print summary statistics
  cat("\n=== Recession Exposure Summary (Country-Specific) ===\n")
  cat("Total individuals:", nrow(final_data), "\n")
  cat("Individuals with valid recession data:", sum(!is.na(final_data$recession_threshold_avg)), "\n")
  cat("Individuals with recession exposure:", sum(final_data$recession_formative), "\n")
  cat("Percentage exposed to recession:", 
      round(mean(final_data$recession_formative) * 100, 2), "%\n")
  cat("Average number of recession years (among exposed):", 
      round(mean(final_data$n_recession_years[final_data$recession_formative == 1]), 2), "\n")
  cat("Average recession intensity (among exposed):", 
      round(mean(final_data$recession_intensity[final_data$recession_formative == 1]), 2), "%\n")
  
  return(final_data)
}

# Apply to your data
final_data_gdp <- calculate_recession_exposure(final_data_gdp, recession_indicators)
```
