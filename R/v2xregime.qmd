


```{r}
#| include: false
library(pacman)
p_load(haven,
       here,
       stargazer,
       summarytools,
       readxl,
       dplyr,
       lubridate,
       ggplot2,
       vdemdata,
       summarytools,
       devtools,
       zoo,
       tidyverse,
       fixest,
       dplyr,
       tidyr,
       modelsummary,
       tinytable,
       here,
       countrycode,
       gt)

```


```{r}



library(vdemdata)

# V-Dem Country-Year dataset (və daha çox)
data("vdem")  # Bu, əsas datasetdir

vdem_subset <- vdem %>%
  select(year, v2x_regime, country_name, country_text_id) %>%
  rename(
    country = country_name,
    isocode = country_text_id
  )



vdem_subset <- vdem_subset %>% filter(year>= 1920)
```




```{r}
source(here("R", "Script", "01_Data_loading.R"))
source(here("R", "Script", "02_filtering.R"))
```









```{r function for regime change}

create_country_regime_data_vdem <- function(vdem_data,
                                            lag_years = 10,
                                            country_filter = NULL) {
  
  # 1. Apply country filter if provided (based on isocode)
  if (!is.null(country_filter)) {
    vdem_data <- vdem_data %>%
      filter(isocode %in% country_filter)
  }
  
  # 2. Calculate regime change using lag comparison
  country_regime_changes <- vdem_data %>%
    arrange(isocode, year) %>%
    group_by(isocode) %>%
    mutate(
      v2x_regime_lag = lag(v2x_regime, lag_years),
      regime_change = case_when(
        !is.na(v2x_regime_lag) & v2x_regime_lag %in% 0:1 & v2x_regime %in% 2:3 ~ 2,  # Democratization
        !is.na(v2x_regime_lag) & v2x_regime_lag %in% 2:3 & v2x_regime %in% 0:1 ~ 1,  # Autocratization
        TRUE ~ 0  # No major regime change
      ),
      treatment_factor = factor(regime_change,
                                levels = c(0, 1, 2),
                                labels = c("No change", "Autocratization", "Democratization"))
    ) %>%
    ungroup() %>%
    filter(year >= 1920)

  # 3. Identify the first regime change for each country (by isocode)
  first_change_direction <- country_regime_changes %>%
    filter(regime_change != 0) %>%
    group_by(isocode) %>%
    slice_min(year, with_ties = FALSE) %>%
    mutate(
      first_regime_change_year = year,
      first_regime_change_type = case_when(
        regime_change == 2 ~ "Democratization",
        regime_change == 1 ~ "Autocratization",
        TRUE ~ NA_character_
      ),
      formative_democratization = ifelse(regime_change == 2, 1, 0),
      formative_autocratization = ifelse(regime_change == 1, 1, 0)
    ) %>%
    select(isocode, first_regime_change_year, first_regime_change_type,
           formative_democratization, formative_autocratization)

  # 4. Merge the first regime change info and add new columns
  country_regime_changes <- country_regime_changes %>%
    left_join(first_change_direction, by = "isocode") %>%
    mutate(
      formative_democratization = replace_na(formative_democratization, 0),
      formative_autocratization = replace_na(formative_autocratization, 0)
    ) %>%
    select(isocode, country, year, v2x_regime, v2x_regime_lag,
           regime_change, treatment_factor,
           first_regime_change_year, first_regime_change_type,
           formative_democratization, formative_autocratization)
  
  return(country_regime_changes)
}

regime_data <- create_country_regime_data_vdem(vdem_subset)


```




```{r}

merge_vdem_changes_with_individuals <- function(gps_data, vdem_regime_data) {
  
  # 1. Filter regime changes (only actual changes)
  regime_changes_long <- vdem_regime_data %>%
    filter(regime_change != 0) %>%
    rename(regime_change_year = year)
  
  # 2. Merge with GPS data by isocode (not country name)
  merged_data <- gps_data %>%
    left_join(regime_changes_long, by = "isocode", relationship = "many-to-many") %>%
    mutate(
      age_at_regime_change = regime_change_year - birth_year,
      experienced_formative_change = case_when(
        is.na(regime_change_year) ~ 0,
        age_at_regime_change >= 3 & age_at_regime_change <= 18 ~ 1,
        TRUE ~ 0
      )
    )
  
  # 3. Aggregate at individual level and extract direction of first regime change
  individual_summary <- merged_data %>%
    group_by(id_gallup) %>%
    summarize(
      across(c(age, isocode, region, patience, risktaking, posrecip, negrecip, altruism, trust,
               subj_math_skills, gender, birth_year, year_3, year_adult),
             first, .names = "{.col}"),
      
      # Binary flag for whether experienced regime change in formative years
      formative_regime_change = if (all(is.na(experienced_formative_change))) 0 else max(experienced_formative_change, na.rm = TRUE),
      
      n_formative_changes = sum(experienced_formative_change, na.rm = TRUE),
      
      first_formative_year = ifelse(any(experienced_formative_change == 1, na.rm = TRUE),
                                    min(regime_change_year[experienced_formative_change == 1], na.rm = TRUE),
                                    NA_real_),
      
      first_formative_age = ifelse(any(experienced_formative_change == 1, na.rm = TRUE),
                                   min(age_at_regime_change[experienced_formative_change == 1], na.rm = TRUE),
                                   NA_real_),
      
      # New columns capturing type of first formative change
      formative_democratization = ifelse(any(experienced_formative_change == 1, na.rm = TRUE),
                                         first(formative_democratization[experienced_formative_change == 1]),
                                         0),
      
      formative_autocratization = ifelse(any(experienced_formative_change == 1, na.rm = TRUE),
                                         first(formative_autocratization[experienced_formative_change == 1]),
                                         0),
      
      first_formative_direction = ifelse(any(experienced_formative_change == 1, na.rm = TRUE),
                                         first(first_regime_change_type[experienced_formative_change == 1]),
                                         NA_character_),
      
      # For reference: all regime change years and ages during formative period
      all_formative_years = list(regime_change_year[experienced_formative_change == 1]),
      all_formative_ages = list(age_at_regime_change[experienced_formative_change == 1]),
      
      .groups = "drop"
    )
  
  # 4. Print summary statistics
  cat("\n=== Summary Statistics ===\n")
  cat("Total individuals:", nrow(individual_summary), "\n")
  cat("Individuals with formative regime changes:", sum(individual_summary$formative_regime_change), "\n")
  cat("Average age at first formative change:", round(mean(individual_summary$first_formative_age, na.rm = TRUE), 2), "\n")
  
  cat("\nFormative regime change distribution:\n")
  print(table(individual_summary$formative_regime_change))
  
  return(individual_summary)
}


final_data_vdem <- merge_vdem_changes_with_individuals(gps_sub, regime_data)


```


```{r}
# 1. Identify countries that experienced any regime change in the V-Dem dataset
countries_with_regime_changes_vdem <- regime_data %>%
  filter(regime_change != 0) %>%
  distinct(isocode) %>%
  pull(isocode)

# 2. Create clean treatment variable: 1 = treated, 0 = pure control, NA = contaminated control (drop later)
final_data_vdem_clean <- final_data_vdem %>%
  mutate(
    clean_treatment = case_when(
      formative_regime_change == 1 ~ 1,                           # Treated: regime change during formative years
      !isocode %in% countries_with_regime_changes_vdem ~ 0,       # Control: countries with no regime change at all
      TRUE ~ NA_real_                                             # Contaminated control: drop
    )
  ) %>%
  filter(!is.na(clean_treatment))  # Keep only treated and clean control

# 3. Check sample sizes by treatment group
cat("Sample sizes by treatment group:\n")
print(table(final_data_vdem_clean$clean_treatment))

# 4. Country-level breakdown by number of treated individuals
country_breakdown_vdem <- final_data_vdem_clean %>%
  group_by(clean_treatment, isocode) %>%
  summarise(n_individuals = n(), .groups = "drop") %>%
  arrange(clean_treatment, desc(n_individuals))

cat("\nCountry breakdown by treatment group (V-Dem):\n")
print(country_breakdown_vdem)

# 5. Summary table: number of individuals and countries by treatment group
country_summary_vdem <- final_data_vdem_clean %>%
  group_by(clean_treatment) %>%
  summarise(
    n_individuals = n(),
    n_countries = n_distinct(isocode),
    countries = paste(unique(isocode), collapse = ", "),
    .groups = "drop"
  )

cat("\nSummary by treatment group (V-Dem):\n")
print(country_summary_vdem)

# 6. Summary of treated countries (only treated, since no direction in V-Dem)
treated_countries_vdem <- final_data_vdem_clean %>%
  filter(clean_treatment == 1) %>%
  group_by(isocode) %>%
  summarise(
    total_treated = n(),
    .groups = "drop"
  ) %>%
  arrange(desc(total_treated))

cat("\nCountries with treated individuals (V-Dem):\n")
print(treated_countries_vdem)


```







```{r}
# Average gddppc
calculate_avg_gdppc <- function(data, gdp_data) {
  # Convert year columns to numeric
  data$year_3 <- as.numeric(data$year_3)
  data$year_adult <- as.numeric(data$year_adult)
  
  # Initialize new column
  data$avg_gdppc_formative <- NA_real_
  
  # Loop through each observation to calculate the average GDP
  for (i in seq_len(nrow(data))) {
    iso <- data$isocode[i]
    start_year <- data$year_3[i]
    end_year <- data$year_adult[i]
    
    # Subset GDP data for the matching country and year range
    gdp_subset <- gdp_data[gdp_data$countrycode == iso &
                             gdp_data$year >= start_year &
                             gdp_data$year <= end_year, ]
    
    # Calculate average GDP per capita (ignoring NAs)
    data$avg_gdppc_formative[i] <- mean(gdp_subset$gdppc, na.rm = TRUE)
  }
  
  return(data)
}


final_data_vdem_clean_gdp <- calculate_avg_gdppc(final_data_vdem_clean, gdp_data)



'calculate_avg_polity2 <- function(data, regime_data) {
  data$year_3 <- as.numeric(data$year_3)
  data$year_adult <- as.numeric(data$year_adult)
  data$avg_polity2_formative <- NA_real_
  
  for (i in seq_len(nrow(data))) {
    iso <- data$isocode[i]
    start_year <- data$year_3[i]
    end_year <- data$year_adult[i]
    
    polity_subset <- regime_data[regime_data$isocode == iso &
                                   regime_data$year >= start_year &
                                   regime_data$year <= end_year, ]
    
    data$avg_polity2_formative[i] <- mean(polity_subset$polity2, na.rm = TRUE)
  }
  
  return(data)
}
'


'# Əsas datasetin surətini al və üzərində işləməyə başla
final_data_polity_clean_gdp <- final_data_polity_clean'

# 1. Keep only observations with non-missing GDP per capita values
final_data_vdem_clean_gdp <- final_data_vdem_clean_gdp %>%
  filter(!is.na(avg_gdppc_formative))

# 2. Set regime change to 0 for individuals younger than 3 during the first regime change
final_data_vdem_clean_gdp$formative_regime_change[
  final_data_vdem_clean_gdp$first_formative_age < 3
] <- 0

# 3. Calculate number of years spent under the current regime since first formative change
final_data_vdem_clean_gdp <- final_data_vdem_clean_gdp %>%
  mutate(years_spend_regimes = age - first_formative_age)

# 4. Convert region variable to a factor
final_data_vdem_clean_gdp$region <- factor(final_data_vdem_clean_gdp$region)

# 5. Log-transform GDP per capita
final_data_vdem_clean_gdp$avg_gdppc_formative <- log(final_data_vdem_clean_gdp$avg_gdppc_formative)

# 6. Check how many individuals are treated (experienced regime change during formative years)
table(final_data_vdem_clean_gdp$formative_regime_change)




```





```{r}
#| echo: false
# Creating custom function for two-way fixed effects models
run_twfe_reg <- function(outcome_var,
                         data = final_data_vdem_clean_gdp,
                         controls = c("avg_gdppc_formative"),
                         treatment = "formative_regime_change",
                         fe = c("region", "birth_year"),
                         cluster_var = "isocode") {
  
# Constructing formula with controls
controls_formula <- paste(controls, collapse = " +")
  
# Creating the full formula with fixed effects
formula_str <- paste(
  outcome_var, "~", treatment, controls_formula, "|", 
  paste(fe, collapse = " + ")
  )
  
# Converting string to formula
formula <- as.formula(formula_str)
  
# Running the model
model <- feols(
  formula,
  data = data,
  cluster = cluster_var
  )
  
return(model)
}

preference_vars <- c("patience", "risktaking", "posrecip", "negrecip", "altruism", "trust")
model_names <- c("Patience", "Risk taking", "Positive reciprocity", "Negative reciprocity", "Altruism", "Trust")


# Applying run_twfe_reg to each preference variable and store in a list
preference_models <- list()
for (pref in preference_vars) {
  preference_models[[pref]] <- run_twfe_reg(
    outcome_var = pref,
    data = final_data_vdem_clean_gdp,
    controls = NULL,
    treatment = "formative_regime_change", 
    fe = c("region", "birth_year"),
    cluster_var = "isocode"  # Using country as the cluster variable
  )
}

names(preference_models) <- model_names
# saving the model as a list for the report
saveRDS(preference_models, here("Output","Models", "regime_change_models.rds"))

# Creating a model summary table using msummary
msummary(
  preference_models,
  title = "Effect of Regime Change on Economic Preferences (Two-way Fixed Effects)",
  stars = TRUE,
  coef_map = c(
    "formative_regime_change" = "Regime Change experience",
    "avg_gdppc_formative" = "Average (log) GDP per Capita during formative years",
    "avg_libdem_formative" = "Average LDI during formative years"
  ),
  notes = "Standard errors clustered at country level. Fixed effects for region and birth year included.",
  output = "gt"
)
```

```{r}
# Prepare data: rename regime change indicators for modeling
final_data_vdem_clean_gdp <- final_data_vdem_clean_gdp %>%
  mutate(
    democratization = formative_democratization,
    autocratization = formative_autocratization
  )

# Function for heterogeneity regression models
run_hetero_reg <- function(outcome_var,
                           data = final_data_vdem_clean_gdp,
                           controls = NULL,
                           fe = c("region", "birth_year"),
                           cluster_var = "isocode") {
  
  # Build control part of the formula
  controls_formula <- if (is.null(controls)) {
    ""
  } else {
    paste("+", paste(controls, collapse = " + "))
  }
  
  # Complete formula string
  formula_str <- paste(
    outcome_var, "~ democratization + autocratization", controls_formula, "|",
    paste(fe, collapse = " + ")
  )
  
  # Convert to formula
  formula <- as.formula(formula_str)
  
  # Estimate model with clustered standard errors
  model <- feols(
    formula,
    data = data,
    cluster = cluster_var
  )
  
  return(model)
}

# Run heterogeneity models without controls
hetero_models <- lapply(preference_vars, function(pref) {
  run_hetero_reg(
    outcome_var = pref,
    data = final_data_vdem_clean_gdp,
    controls = NULL  # No controls in this run
  )
})
names(hetero_models) <- model_names

# Save the models for future reference
saveRDS(hetero_models, here("Output", "Models", "hetero_models.rds"))

# Create summary table
msummary(
  hetero_models,
  title = "Heterogeneity by Regime Change Direction (Two-way Fixed Effects) – No Controls",
  stars = TRUE,
  coef_rename = c(
    "democratization" = "Democratization",
    "autocratization" = "Autocratization"
  ),
  notes = "Standard errors clustered at country level (isocode). All models include region and birth year fixed effects.",
  output = "gt"
)

```


```{r}
# Creating a function to estimate models for democratization effects only
run_democ_reg <- function(outcome_var,
                          data = final_data_vdem_clean_gdp,
                          controls = NULL,
                          fe = c("region", "birth_year"),
                          cluster_var = "isocode") {
  
  # Build control part of the formula
  controls_formula <- if (is.null(controls)) {
    ""
  } else {
    paste("+", paste(controls, collapse = " + "))
  }
  
  # Complete formula string
  formula_str <- paste(
    outcome_var, "~ democratization", controls_formula, "|",
    paste(fe, collapse = " + ")
  )
  
  # Convert string to formula
  formula <- as.formula(formula_str)
  
  # Run model with clustering
  model <- feols(
    formula,
    data = data,
    cluster = cluster_var
  )
  
  return(model)
}

# Apply to all preference variables (without controls)
hetero_models_democ <- lapply(preference_vars, function(pref) {
  run_democ_reg(
    outcome_var = pref,
    data = final_data_vdem_clean_gdp,
    controls = NULL  # No controls for now
  )
})

# Rename the models
names(hetero_models_democ) <- model_names

# Save the models to RDS
saveRDS(hetero_models_democ, here("Output", "Models", "hetero_models_democ.rds"))

# Generate summary output
msummary(
  hetero_models_democ,
  title = "Heterogeneity: Democratization Effects Only (Two-way Fixed Effects, No Controls)",
  stars = TRUE,
  coef_rename = c("democratization" = "Democratization"),
  notes = "Standard errors clustered at country level (isocode). All models include region and birth year fixed effects.",
  output = "gt"
)

```

```{r}
# Function to estimate autocratization-only effects
run_autoc_reg <- function(outcome_var,
                          data = final_data_vdem_clean_gdp,
                          controls = NULL,
                          fe = c("region", "birth_year"),
                          cluster_var = "isocode") {
  
  # Build control part of the formula
  controls_formula <- if (is.null(controls)) {
    ""
  } else {
    paste("+", paste(controls, collapse = " + "))
  }
  
  # Complete formula string
  formula_str <- paste(
    outcome_var, "~ autocratization", controls_formula, "|",
    paste(fe, collapse = " + ")
  )
  
  # Convert to formula object
  formula <- as.formula(formula_str)
  
  # Estimate the model
  model <- feols(
    formula,
    data = data,
    cluster = cluster_var
  )
  
  return(model)
}

# Estimate models for each preference variable (no controls)
hetero_models_autoc <- lapply(preference_vars, function(pref) {
  run_autoc_reg(
    outcome_var = pref,
    data = final_data_vdem_clean_gdp,
    controls = NULL  # No controls
  )
})

# Set model names
names(hetero_models_autoc) <- model_names

# Save to RDS
saveRDS(hetero_models_autoc, here("Output", "Models", "hetero_models_autoc.rds"))

# Summary table
msummary(
  hetero_models_autoc,
  title = "Heterogeneity: Autocratization Effects Only (Two-way Fixed Effects, No Controls)",
  stars = TRUE,
  coef_rename = c("autocratization" = "Autocratization"),
  notes = "Standard errors clustered at country level (isocode). All models include region and birth year fixed effects.",
  output = "gt"
)

```
```{r}
# Creating a function for autocratization effects with GDP control only
run_autoc_reg_controls <- function(outcome_var,
                                   data = final_data_vdem_clean_gdp,
                                   controls = c("avg_gdppc_formative"),
                                   fe = c("region", "birth_year"),
                                   cluster_var = "isocode") {
  
  # Constructing formula with GDP control
  controls_formula <- paste(controls, collapse = " + ")
  
  # Creating the full formula with fixed effects
  formula_str <- paste(
    outcome_var, "~ autocratization +", controls_formula, "|",
    paste(fe, collapse = " + ")
  )
  
  # Converting string to formula
  formula <- as.formula(formula_str)
  
  # Running the model
  model <- feols(
    formula,
    data = data,
    cluster = cluster_var
  )
  
  return(model)
}

# Apply the function to each economic preference variable
hetero_models_autoc_controls <- lapply(preference_vars, function(pref) {
  run_autoc_reg_controls(
    outcome_var = pref,
    data = final_data_vdem_clean_gdp
  )
})
names(hetero_models_autoc_controls) <- model_names

# Save the models
saveRDS(hetero_models_autoc_controls, here("Output", "Models", "hetero_models_autoc_controls.rds"))

# Summary table
msummary(
  hetero_models_autoc_controls,
  title = "Heterogeneity: Autocratization Effects Only (Two-way Fixed Effects, With GDP Control)",
  stars = TRUE,
  coef_rename = c(
    "autocratization" = "Autocratization",
    "avg_gdppc_formative" = "Average (log) GDP per Capita"
  ),
  notes = "Standard errors clustered at country level (isocode). All models include region and birth year fixed effects.",
  output = "gt"
)

```


